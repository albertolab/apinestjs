import { Injectable, NotFoundException } from '@nestjs/common';
import { CreateRideDto } from './dto/createRideDTO';
import { UpdateRideDto } from './dto/updateRideDTO';
import { RIDE_STATUS, Ride } from './entities/ride.entity';
import { dataRides } from 'src/mock/rides';
import { generateId } from 'src/utils/generateId';
import { generateDistandeRandom } from 'src/utils/generateDistandeRandom';

@Injectable()
export class RidesService {
  private rides: Ride[] = dataRides;

  create(createRideDto: CreateRideDto): Ride {
    const newRide: Ride = {
      id: generateId(this.rides), // autogenerated
      status: RIDE_STATUS.pending,
      busDriver: {
        // should be matched in a db with busLicensePlate
        firstName: 'Test Driver Name',
        lastName: 'Test Driver LastName',
      },
      distance: generateDistandeRandom(),
      ...createRideDto,
    };
    this.rides.push(newRide);
    return newRide;
  }

  findAll(): Ride[] {
    return this.rides;
  }

  findOne(id: number): Ride {
    const rideFound = this.rides.find((ride) => ride.id === id);
    if (!rideFound)
      throw new NotFoundException(`Ride with id ${id} not found.`);
    return rideFound;
  }

  findAllByStatus(status: string): Ride[] {
    return this.rides.filter((ride) => ride.status === status);
  }

  update(id: number, updateRideDto: UpdateRideDto): Ride {
    const ride = this.findOne(id);
    const updatedTask = Object.assign(ride, updateRideDto);
    this.rides = this.rides.map((ride) =>
      ride.id === id ? updatedTask : ride,
    );
    return updatedTask;
  }

  remove(id: number) {
    const index = this.rides.findIndex((ride) => ride.id === id);
    if (index === -1) {
      throw new NotFoundException(`Ride with id ${id} not found.`);
    }
    this.rides = this.rides.filter((ride) => ride.id !== id);
    return { message: 'Ride deleted successfully.' };
  }
}
